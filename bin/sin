#!/usr/bin/env node
// Â≠óÁ¨¶Á†Å
const figlet = require('figlet')
// Ê∏êÂèò
const Printer = require('@darkobits/lolcatjs')
const program = require('commander')
const inquirer = require('inquirer');
const chalk = require('chalk')
const json2ts = require('json2ts')
const ora = require('ora')
const userHome = require('user-home')
const shell = require('shelljs')
const download = require('download-git-repo')

const result = figlet.textSync('SIN-CLI', { font: 'Sweet' })
const text = Printer.default.fromString(result)
program.version(text, "-v, --version")
program.option('init', "üîß ÂàùÂßãÂåñÈ°πÁõÆ")
program.option('json2ts', "üèÜ Êé•Âè£Êï∞ÊçÆÁîüÊàêts")

const bindHandler = {
    init() {
        inquirer
            .prompt([
                {
                    type: 'test',
                    name: 'dirname',
                    message: 'üìÅ ËØ∑ËæìÂÖ•Êñá‰ª∂Â§πÂêçÁß∞',
                },
                /* Pass your questions in here */
                {
                    type: 'list',
                    name: 'jstype',
                    message: 'üí¨ ÈÄâÊã©Ë¶Å‰ΩøÁî®ÁöÑËØ≠Ë®Ä',
                    choices: ['‚òº ES6', '‚òº Typescript']
                }
            ])
            .then(answers => {
                console.log(answers);
                const {dirname, jstype} = answers
                if(dirname) {
                    const templateUrl = "direct:https://github.com/Naixes/demo-collection-pro.git"
                    const spinner = ora('‚è∞ Downloading...')
                    spinner.start()

                    const _pwd = shell.pwd().stdout
                    const _projectPath = `${_pwd}/${dirname}`
                    shell.cd(_pwd)
                    shell.rm("-rf", _projectPath)
                    shell.mkdir(dirname)
                    download(templateUrl, _projectPath, {clone: true}, err => {
                        spinner.stop()
                        if(err) {
                            console.log(chalk.red("Ê®°Áâà‰∏ãËΩΩÂ§±Ë¥• "), err);
                        }else {
                            // sedÊõøÊç¢ÔºåawkËøáÊª§
                            // shell.sed("-i", "8-9", dirname, _projectPath + '/package.json')
                        }
                    })
                }
            })
            .catch(error => {
                if(error.isTtyError) {
                    // Prompt couldn't be rendered in the current environment
                } else {
                    // Something else went wrong
                }
            }
        );
    },
    json2ts(url) {
        const spinner = ora('‚è∞ Loading...')
        spinner.start()
        console.log('Êé•Âè£Âú∞ÂùÄ', url);
        const jsonContent = {
            code: 200,
            info: {
                massage: 'msg',
                data: [
                    {
                        num: 'num',
                        title: 'title'
                    }
                ]
            }
        }
        let result = json2ts.convert(JSON.stringify(jsonContent))
        console.log(result);
        spinner.stop()
    }
}

program.usage("<cmd> [env]")
    .arguments("<cmd> [env]")
    .action(function(cmd, otherParams) {
        const handler = bindHandler[cmd]
        if(handler) {
            handler()
        }else {
            console.log(chalk.yellow(cmd) + chalk.red(' not found'));
        }
    })
program.parse(process.argv)